name: Automated Release on Master

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - 'renovate.json'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '24'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.20.0

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test:run

      - name: Build package
        run: pnpm build

      - name: Determine version bump
        id: version
        run: |
          # Get the last commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit: $COMMIT_MSG"
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Determine bump type based on conventional commits
          if echo "$COMMIT_MSG" | grep -qiE '^(feat!|fix!|chore!|breaking|BREAKING CHANGE)'; then
            BUMP_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -qiE '^feat(\(.*\))?:'; then
            BUMP_TYPE="minor"
          elif echo "$COMMIT_MSG" | grep -qiE '^(fix|chore|docs|style|refactor|perf|test)(\(.*\))?:'; then
            BUMP_TYPE="patch"
          else
            echo "No conventional commit detected, defaulting to patch"
            BUMP_TYPE="patch"
          fi
          
          echo "Bump type: $BUMP_TYPE"
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          
          # Calculate new version
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          if [ "$BUMP_TYPE" = "major" ]; then
            NEW_VERSION="$((major + 1)).0.0"
          elif [ "$BUMP_TYPE" = "minor" ]; then
            NEW_VERSION="$major.$((minor + 1)).0"
          else
            NEW_VERSION="$major.$minor.$((patch + 1))"
          fi
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update package version
        run: |
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          git add package.json
          git commit -m "chore(release): bump version to ${{ steps.version.outputs.new_version }} [skip ci]"
          git push

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ## What's Changed
            
            Auto-generated release for version ${{ steps.version.outputs.new_version }}
            
            ### Changes
            ${{ github.event.head_commit.message }}
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.version.outputs.current_version }}...v${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: false

      - name: Publish to npm
        run: pnpm publish --no-git-checks --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
